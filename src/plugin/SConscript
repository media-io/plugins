
import os
import sys

Import('env')
Import('conf')

def getPlatformName():
    '''Get the name of the current platform.
    One of the followings :
        * MacOS - for Apple Macintosh OS X (compiled 32 bit)
        * Win32 - for Microsoft Windows (compiled 32 bit)
        * IRIX - for SGI IRIX plug-ins (compiled 32 bit)
        * IRIX64 - for SGI IRIX plug-ins (compiled 64 bit)
        * Linux-x86 - for Linux on intel x86 CPUs (compiled 32 bit)
        * Linux-x86-64 - for Linux on intel x86 CPUs running AMD's 64 bit extensions
    '''
    osname = os.name.lower()
    sysplatform = sys.platform.lower();

    if osname == "posix":
        if (os.uname()[4][-3:] == '_64'):
            bits = 64
        else:
            bits = 32
        if sysplatform.find("linux") >= 0:
            if bits == 64:
                return 'Linux-x86-64'
            return 'Linux-x86'
        elif sysplatform.find("cygwin") >= 0:
            if bits == 64:
                return 'Linux-x86-64'
            return 'Linux-x86'
        elif sysplatform.find("darwin") >= 0:
            return 'MacOS'
        elif sysplatform.find("irix") >= 0:
            if (os.uname()[4][-3:] == '_64'):
                bits = 64
            else:
                bits = 32
            if bits == 64:
                return 'IRIX64'
            return 'IRIX'
    elif osname == "nt":
        if 'PROGRAMFILES(X86)' not in os.environ:
            bits = 32
        else:
            bits = 64
        if sysplatform.startswith("win"):
            return 'Win' + str(bits)
        elif sysplatform.find("cygwin") >= 0:
            return 'Win' + str(bits)

    raise "Unknown Platform (%s, %s)" % (osname, sysplatform)

def plugin(bundle, libraries = [], headers = [], code_style = 'c'):

    if(len(libraries)):
        if(not conf.CheckLibWithHeader(libraries, headers, code_style)):
            # print 'Missing depedencies for target ' + bundle
            return

    bundle_target = env.SharedLibrary(
        bundle,
        Glob(bundle + '/*.cpp'),
        LIBS = [
            'mediaio-api',
            libraries
        ],
        SHLIBPREFIX = "",
        SHLIBSUFFIX = ".miop",
        SHLIBVERSION = "",
    )

    env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/Mediaio/Plugins/' + bundle + '.miop.bundle/Contents/' + platform, bundle_target))


platform = getPlatformName()


plugin('filesystem')
plugin('sequence')
plugin('raw')
plugin('statistics')
plugin('comparator')
plugin('psnr')
plugin('constant')
plugin('mxf')

plugin('turingcodec', [
        'turing',
        'havoc',
        'pthread',
        'boost_system',
        'boost_chrono',
        'boost_filesystem',
        'boost_program_options',
        'boost_timer'
    ], [
        'turing.h'
    ])

plugin('bento_ts', [
        'Bento4'
    ], [
        'Ap4.h'
    ],
    'c++')

plugin('gamma', [
        'Halide'
    ], [
        'Halide.h'
    ],
    'c++')

plugin('math', [
        'Halide'
    ], [
        'Halide.h'
    ],
    'c++')

plugin('seexpr', [
        'SeExpr'
    ], [
        'SeExpression.h'
    ],
    'c++')

plugin('text', [
        'freetype'
    ], [
        'freetype2/ft2build.h'
    ])

plugin('tiff', [
        'tiff',
        'tiffxx'
    ], [
        'tiff.h'
    ])

plugin('openjpeg', [
        'openjp2'
    ], [
        'openjpeg-2.1/openjpeg.h'
    ])

plugin('asdcplib', [
        'kumu',
        'as02',
        'asdcp'
    ], [
        'AS_02.h',
        'AS_DCP.h'
    ],
    'c++')

plugin('ffmpeg', [
        'avcodec'
    ], [
        'libavcodec/avcodec.h'
    ])
