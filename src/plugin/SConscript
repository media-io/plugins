
import os
import sys

Import('env')
Import('conf')

def getPlatformName():
    '''Get the name of the current platform.
    One of the followings :
        * MacOS - for Apple Macintosh OS X (compiled 32 bit)
        * Win32 - for Microsoft Windows (compiled 32 bit)
        * IRIX - for SGI IRIX plug-ins (compiled 32 bit)
        * IRIX64 - for SGI IRIX plug-ins (compiled 64 bit)
        * Linux-x86 - for Linux on intel x86 CPUs (compiled 32 bit)
        * Linux-x86-64 - for Linux on intel x86 CPUs running AMD's 64 bit extensions
    '''
    osname = os.name.lower()
    sysplatform = sys.platform.lower();
    if osname == "posix":
        if sysplatform.find("linux") >= 0:
            if bits == 64:
                return 'Linux-x86-64'
            return 'Linux-x86'
        elif sysplatform.find("cygwin") >= 0:
            if bits == 64:
                return 'Linux-x86-64'
            return 'Linux-x86'
        elif sysplatform.find("darwin") >= 0:
            return 'MacOS'
        elif sysplatform.find("irix") >= 0:
            if bits == 64:
                return 'IRIX64'
            return 'IRIX'
    elif osname == "nt":
        if sysplatform.startswith("win"):
            return 'Win' + str(bits)
        elif sysplatform.find("cygwin") >= 0:
            return 'Win' + str(bits)

    raise "Unknown Platform (%s, %s)" % (osname, sysplatform)

platform = getPlatformName()

FileSystemPlugin = env.SharedLibrary(
    'filesystem',
    Glob( 'filesystem/*.cpp' ),
    LIBS = [
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

SequencePlugin = env.SharedLibrary(
    'sequence',
    Glob( 'sequence/*.cpp' ),
    LIBS = [
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

StatisticsPlugin = env.SharedLibrary(
    'statistics',
    Glob( 'statistics/*.cpp' ),
    LIBS = [
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

ComparatorPlugin = env.SharedLibrary(
    'comparator',
    Glob( 'comparator/*.cpp' ),
    LIBS = [
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

PsnrPlugin = env.SharedLibrary(
    'psnr',
    Glob( 'psnr/*.cpp' ),
    LIBS = [
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

ConstantPlugin = env.SharedLibrary(
    'constant',
    Glob( 'constant/*.cpp' ),
    LIBS=[
        'mediaio-api',
    ],
    SHLIBPREFIX = "",
    SHLIBSUFFIX = ".miop",
    SHLIBVERSION = "",
)

if conf.CheckLibWithHeader('turing', 'turing.h', 'c'):
    TuringcodecPlugin = env.SharedLibrary(
        'turingcodec',
        Glob( 'turingcodec/*.cpp' ),
        LIBS=[
            'mediaio-api',
            'turing',
            'havoc',
            'pthread',
            'boost_system',
            'boost_chrono',
            'boost_filesystem',
            'boost_program_options',
            'boost_timer',
        ],
        SHLIBPREFIX = "",
        SHLIBSUFFIX = ".miop",
        SHLIBVERSION = "",
    )
    env.Alias('install', env.InstallVersionedLib('plugin/turingcodec.miop.bundle/Contents/' + platform, TuringcodecPlugin))
else:
    print 'Did not find turingcodec library!'

if conf.CheckLibWithHeader('Bento4', 'Ap4.h', 'c++'):
    BentoTSPlugin = env.SharedLibrary(
        'bento_ts',
        Glob( 'bento_ts/*.cpp' ),
        LIBS=[
            'mediaio-api',
            'Bento4',
        ],
        SHLIBPREFIX = "",
        SHLIBSUFFIX = ".miop",
        SHLIBVERSION = "",
    )
    env.Alias('install', env.InstallVersionedLib('plugin/bento_ts.miop.bundle/Contents/' + platform, BentoTSPlugin))
else:
    print 'Did not find Bento4 library!'


if conf.CheckLibWithHeader('Halide', 'Halide.h', 'c++'):
    BentoTSPlugin = env.SharedLibrary(
        'gamma',
        Glob( 'gamma/*.cpp' ),
        LIBS=[
            'mediaio-api',
            'Halide',
        ],
        SHLIBPREFIX = "",
        SHLIBSUFFIX = ".miop",
        SHLIBVERSION = "",
    )
    env.Alias('install', env.InstallVersionedLib('plugin/gamma.miop.bundle/Contents/' + platform, BentoTSPlugin))
else:
    print 'Did not find Bento4 library!'


env.Alias('install', env.InstallVersionedLib('plugin/filesystem.miop.bundle/Contents/' + platform,    FileSystemPlugin    ))
env.Alias('install', env.InstallVersionedLib('plugin/sequence.miop.bundle/Contents/' + platform,      SequencePlugin      ))
env.Alias('install', env.InstallVersionedLib('plugin/statistics.miop.bundle/Contents/' + platform,    StatisticsPlugin    ))
env.Alias('install', env.InstallVersionedLib('plugin/comparator.miop.bundle/Contents/' + platform,    ComparatorPlugin    ))
env.Alias('install', env.InstallVersionedLib('plugin/psnr.miop.bundle/Contents/' + platform,          PsnrPlugin          ))
env.Alias('install', env.InstallVersionedLib('plugin/constant.miop.bundle/Contents/' + platform,      ConstantPlugin      ))
